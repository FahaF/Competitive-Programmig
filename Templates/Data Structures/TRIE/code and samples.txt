
--------------------------------------------------------------------------------------------
Some inputs strings are given. If there is any common prefix then answer should be "N0"

--------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;

#define maxn 10000
const int SIZE=maxn*10;

//trie
int sz=1;
struct node
{
    int pre,edword;
    int nxt[10];
};
int has(char ch)
{
    return (ch-'0');
}

node trie[SIZE+1];
bool add(string s)
{
    int i,p=1;
    int _size = s.size();
    for(i=0; i<_size; i++)
    {
        if(trie[p].edword)
            return false;
        if(!trie[p].nxt[has(s[i])])
            trie[p].nxt[has(s[i])] = ++sz;
        p = trie[p].nxt[has(s[i])];
        trie[p].pre++;
    }
    if(trie[p].edword)
        return false;
    trie[p].edword++;
    return true;
}
int main()
{
    int T;
    cin>>T;
    for(int kase=1; kase<=T; kase++)
    {
        int n;
        scanf("%d",&n);
        memset(trie,0,sizeof(trie));
        sz = 1;
        string s[10008];
        bool ok=true;
        for(int i=0; i<n; i++)
        {
            cin>>s[i];
        }
        sort(s,s+n);

        for(int i=0; i<n; i++)
        {
            ok &= add(s[i]);
        }
        if(ok)
            printf("Case %d: YES\n",kase);
        else
            printf("Case %d: NO\n",kase);
    }}

--------------------------------------------------------------------------------------------

Onekgula input string e kon set nile (prefix length * set e total string) max hobe.

--------------------------------------------------------------------------------------------
#define maxn 50000
const int SIZE=maxn*50;
int n;
int best,sz;
struct node
{
    int pre,edword;
    int nxt[4];
};
int has(char ch)
{
    if(ch=='A')return 0;
    if(ch=='G')return 1;
    if(ch=='C')return 2;
    return 3;
}
node trie[SIZE+1];
void add(string s)
{
    int i,p=1;
    int _size = s.size();
    for(i=0; i<_size; i++)
    {
        if(!trie[p].nxt[has(s[i])])
            trie[p].nxt[has(s[i])] = ++sz;
        p = trie[p].nxt[has(s[i])];
        trie[p].pre++;
    }
    trie[p].edword++;
}
void dfs(int level,int p)
{
    if(!p)
        return;
    best = max(best,level*trie[p].pre); // eikhane level holo koddur prefix matched. Ar pre holo odddur e koi //ta string ase.
    for(int i =0; i<4; i++)
    {
        dfs(level+1,trie[p].nxt[i]);
    }
}
int main()
{
    int T;
    cin>>T;
    for(int kase=1; kase<=T; kase++)
    {
        scanf("%d",&n);
        memset(trie,0,sizeof(trie));
        sz = 1;
        string s;
        for(int i=1; i<=n; i++)
        {
            cin>>s;
            add(s);
        }
        best = 0;
        dfs(0,1);
       printf("Case %d: %lld\n",kase,best);
    }}


--------------------------------------------------------------------------------------------------------
Given an array of positive integers you have to print the number of subarrays whose XOR is less than K.

--------------------------------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;
#define maxn 50000
const int SIZE=maxn*50;
 
//trie
int trie[SIZE+1][2];
int cnt[SIZE+1];
int sz=1,KK;
void add(int n)
{
    int i,p=1;
    int has;
    for(i=31; i>=0; i--)
    {
        has = (n>>i)&1;
 
        if(trie[p][has]==-1)
            trie[p][has] = ++sz;
 
        p = trie[p][has];
        cnt[p]++;
    }
}
 
//****
int solve(int n)
{
    int p,q,node=1,ans=0;
    for(int i=31; i>=0; i--)
    {
        p = (n>>i)&1;
        q = (KK>>i)&1;
        if(q)
        {
            ans+=cnt[trie[node][p]];
            node = trie[node][p^1];
        }
        else
        {
            node = trie[node][p];
        }
    }
    return ans;
}
int main()
{
    int t,a,cur,n;
    cin>>t;
    while(t--)
    {
        cin>>n>>KK;
        cur = 0;
        memset(trie,-1,sizeof trie);
        memset(cnt,0,sizeof cnt);
        sz=1;
        add(cur);
        long long int res = 0;
        while(n--)
        {
            cin>>a;
            cur^=a;
            res += solve(cur);
             add(cur);
        }
        cout<<res<<endl;
    }
}


Trie Delete cf 923C
-----------------------------------------------------------------------------------------------------


#include<bits/stdc++.h>
using namespace std;
typedef long long ll;


#define maxn 300002
const ll SIZE=maxn*50;
ll trie[SIZE+1][3];
ll cnt[maxn];

ll sz=1;
void add(ll n)
{
    ll i,p=1;
    ll has;
    for(i=31; i>=0; i--)
    {
        has = (n>>i)&1;

        if(trie[p][has]==-1)
            trie[p][has] = ++sz;


         p = trie[p][has];

         cnt[p]++;


    }
}

ll find_min(ll n)
{
    ll nxt,p=1,val=0;
    for(ll j=31; j>=0; j--)
    {
        nxt = (n>>j)&1;

        if(trie[p][nxt]!=-1&&cnt[trie[p][nxt]]>0)
        {
            p = trie[p][nxt];
            cnt[p]--;

        }
        else
        {

            val+=pow(2,j);
            p = trie[p][nxt^1];
            cnt[p]--;
        }

    }
    return val;
}


int main()
{

    ios_base::sync_with_stdio(false);cin.tie(NULL);

     ll i,j,k,l,m,n,t;

    cin >> n;
    ll ar[n+10];
    ll br[n+10];

    memset(trie,-1,sizeof trie);

    for(i=0;i<n;i++)cin >> ar[i];
    for(i=0;i<n;i++)cin >> br[i];

    for(i=0;i<n;i++)add(br[i]);

    for(i=0;i<n;i++)
    {
       // bad=0;
        cout << find_min(ar[i]) << " ";

    }

    cout << endl;
}


another sample of delete 

--------------------------------------------------------------------------------------

#include "bits/stdc++.h"
using namespace std;
 
const int maxn = 400005;
 
int a[maxn], b[maxn];
int n;
int t[maxn * 31][2];
int cnt[maxn * 31];
int node = 0;
 
void insert(int x){
  int cur = 0;
  for(int i = 30; i >= 0; --i){ 
    int bit = (x >> i) & 1;
    if(!t[cur][bit]){
      t[cur][bit] = ++node;
    }
    cnt[t[cur][bit]]++;
    cur = t[cur][bit];
  }
}
 
int query(int x){
  int cur = 0, ret = 0;
  for(int i = 30; i >= 0; --i){
    int bit = (x >> i) & 1;
    if(t[cur][bit] && cnt[t[cur][bit]] > 0){
      cur = t[cur][bit];
      if(bit)ret |= (1 << i);
    }else if(t[cur][bit ^ 1] && cnt[t[cur][bit ^ 1]] > 0){
      if(bit ^ 1){
        ret |= (1 << i);
      }
      cur = t[cur][bit ^ 1];
    }else {
      return 0;
    }
  }
  return ret;
}
 
void del(int x){
  int cur = 0;
  for(int i = 30; i >= 0; --i){
    int bit = (x >> i) & 1;
    if(!t[cur][bit]){
      t[cur][bit] = ++node;
    }
    cnt[t[cur][bit]]--;
    cur = t[cur][bit];
  }
}
 
int main(int argc, char const *argv[])
{
  scanf("%d", &n);
  for(int i = 1; i <= n; ++i){
    scanf("%d", &a[i]);
  }
  for(int i = 1; i <= n; ++i){
    scanf("%d", &b[i]);
    insert(b[i]);
  }
  for(int i = 1; i <= n; ++i){
    int x = query(a[i]);
    printf("%d ", (a[i] ^ x));
    del(x);
  }
 
  return 0;
}

 
